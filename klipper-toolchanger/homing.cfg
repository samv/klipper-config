[gcode_macro _HOME_Z_ENDSTOP]
gcode:
    # called from homing_override, so this performs the actual homing using the endstop
    G28 Z
    G90
    G1 Z100 F2400

[homing_override]
axes: xyz
gcode:
  INITIALIZE_TOOLCHANGER
  {% if printer.probe.last_query  %}
         RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
  {% else %}
    {% set _settings = printer.configfile.settings %}
    {% set _stepper_x = _settings['stepper_x'] %}
    {% set _stepper_y = _settings['stepper_y'] %}
    {% set _stepper_z1 = _settings['stepper_z'] %}
    {% set min_x, max_x = _stepper_x.position_min, _stepper_x.position_max %}
    {% set min_y, max_y = _stepper_y.position_min, _stepper_y.position_max %}
    {% set min_z, max_z = _stepper_z1.position_min, _stepper_z1.position_max %}
    {% set mid_x, mid_y = (min_x+max_x)/2, (min_y + max_y)/2 %}
    {% set restore_z = 0 %}
    {% set fast = 150 %}
    {% set tool_number = printer.tool_probe_endstop.active_tool_number | int %}

    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = ('X' not in params and 'Y' not in params and 'Z' not in params) or ('X' in params and 'Y' in params and 'Z' in params) %}

    # no_reset is set when homing just one of X and Y, and skips the move away from the detected end position
    {% set no_reset = not home_all and (('X' in params) != ('Y' in params)) %}

    {% if home_all or 'Z' in params %}
      _HOME_Z_ENDSTOP
    {% elif 'Z' not in printer.toolhead.homed_axes %}
      # don't shi^Wscour the bed
      _relatively
      G0 Z5 F600
      {% set restore_z = -5 %}
    {% endif %}

    {% if tool_number < 0 %}
      {% if home_all or 'X' in params %}
        _HOME_XY AXIS=X {% if no_reset %}RESET_MOVE="X0"{% endif %}
        G0 X57.5 F{fast * 60}
      {% endif %}
    {% endif %}
    {% if home_all or 'Y' in params %}
      _HOME_XY AXIS=Y {% if no_reset %}RESET_MOVE="Y0"{% endif %}
    {% endif %}
    {% if tool_number >= 0 %}
      {% if home_all or 'X' in params %}
        _HOME_XY AXIS=X {% if no_reset %}RESET_MOVE="X0"{% endif %}
      {% endif %}
    {% endif %}
  
    _absolutely

    {% if (tool_number >= 0) and (home_all or ('Z' in params and 'X' in printer.toolhead.homed_axes and 'Y' in printer.toolhead.homed_axes)) %}
      CALIBRATE_Z_OFFSET_AT_POINT
    {% else %}
      RESPOND TYPE=echo MSG='No tool (tool number = "{tool_number}"); no Z calibration'
      _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    {% endif %}

    M400
  {% endif %}

    {% if restore_z %}
    _relatively
    G0 Z{restore_z} F600
    _absolutely
    {% endif %}

[gcode_macro CALIBRATE_Z_OFFSET]
description: probe the bed using the toolhead at the current position, and calibrates Z from the result
gcode:
      {% set speed = params.SPEED | default(2.5) | float %}
      {% set lift_speed = params.LIFT_SPEED | default(1) | float %}
      {% set lift_distance = params.LIST_DISTANCE | default(1.5) | float %}
      {% set samples = params.SAMPLES | default(5) | int %}
      {% set retries = params.RETRIES | default(10) | int %}
      {% set tolerance = params.TOLERANCE | default(0.01) | float %}
      {% set gauge_size = params.Z_GAUGE | default(0) | float %}
      _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
      STOP_TOOL_PROBE_CRASH_DETECTION
      PROBE PROBE_SPEED={speed} LIFT_SPEED={lift_speed} SAMPLES={samples} SAMPLE_RETRACT_DIST={lift_distance} SAMPLES_TOLERANCE={tolerance} SAMPLES_TOLERANCE_RETRIES={retries}
      _relatively
      G0 Z{lift_distance} F2400
      APPLY_PROBE_RESULT Z_GAUGE={gauge_size}
      ENABLE_TOOL_PROBE_CRASH_DETECTION
      _absolutely
      G0 Z{gauge_size + 2} F2400

[gcode_macro CALIBRATE_Z_OFFSET_AT_POINT]
description: moves to a specific cartesian location, then probe the bed and apply the result to Z
gcode:
      {% set pos_x = params.POINT_X | default(82) | int %}
      {% set pos_y = params.POINT_Y | default(99) | int %}
      {% set pos_z = params.POINT_Z | default(2.5) | float %}
      {% set gauge_size = params.Z_GAUGE | default(0) | float %}
      {% set random_x = pos_x + (range(-10, 10) | random) / 10 %}
      {% set random_y = pos_y + (range(-10, 10) | random) / 10 %}
      {% set fast = printer[printer.toolchanger.tool].params_fast_speed %}

      G0 X{random_x} Y{random_y} F{ fast * 60 } Z{pos_z}
      CALIBRATE_Z_OFFSET Z_GAUGE={gauge_size}

[gcode_macro APPLY_PROBE_RESULT]
description: takes the last probe result and applies it as the Z offset
gcode:
      {% set z_gauge = params.Z_GAUGE | default(0) | float %}
      {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset | float %}
      {% set probe_result = printer.probe.last_z_result %}
      {% set pos = printer.toolhead.position %}
      RESPOND TYPE=echo MSG="Z is currently {pos.z | round(3)}, net probe result is {(probe_result - z_gauge - probe_z_offset) | round(3)}"
      {% set calibrated_z = (pos.z - (probe_result - z_gauge - probe_z_offset)) | round(3) %}
      SET_KINEMATIC_POSITION Z={calibrated_z}
      RESPOND TYPE=echo MSG="Z is now {calibrated_z}"
      {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
      SET_GCODE_OFFSET Z={tool_z_offset}

; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      {% set assumed_z_pos = params.Z | float %}
      {% set triggered_z_pos = printer.toolhead.position.z %}
      {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
      # move back the probe offsetâ€”how much the bed needs to push to trigger the probe
      _relatively
      G0 Z{-probe_z_offset}
      {% set tool = printer.toolchanger %}
      {% set tool_number = (printer.tool_probe_endstop.active_tool_number | int) %}
      {% if tool_number >= 0 %}
         # then set the kinematic position to be the gcode offset (0 for toolhead 0)
         SET_KINEMATIC_POSITION Z={assumed_z_pos|float}
      {% endif %}
      {% set tool_z_offset = printer[tool].gcode_z_offset %}
      SET_GCODE_OFFSET Z={tool_z_offset}
      _absolutely

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% set tool_number = printer.tool_probe_endstop.active_tool_number %}
    {% if tool_number >= 0 %}
      {% set offset_x = printer[tool].gcode_x_offset %}
      {% set offset_y = printer[tool].gcode_y_offset %}
      {% set offset_z = printer[tool].gcode_z_offset %}
      SET_GCODE_OFFSET X={offset_x} Y={offset_y} Z={offset_z}
      RESPOND TYPE=echo MSG='Set GCode offsets for "{tool}" to [{offset_x}, {offset_y}, {offset_z}]'
    {% else %}
      RESPOND TYPE=error MSG='No tool, no offsets'
    {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
      {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
      G90 ; absolute mode
      G0 Z10 F1000
      # Bed mesh knows about the probe offset, but not about the tool offset.
      SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
      BED_MESH_CALIBRATE
      G0 Z4 F1000
      SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}

[gcode_macro _HOME_XY]
gcode:
    # who do you want to home today, brain?
    {% set AXYS = params.AXIS|default("YX") %}
    {% set PRE_RESET = params.PRE_RESET|default("") %}
    {% set RESET_MOVE = params.RESET_MOVE|default("") %}
    {% set MOVE_HOME = params.HOME_MOVE|default("G28 " + AXYS) %}
    # how hard?
    {% set HOME_CURRENT_RATIO = params.FORCE|default(0.5 if 'Y' in AXYS else 0.6)|float %}

    # shortcut assignments
    {% set _settings = printer.configfile.settings %}
    {% set _stepper_x = _settings['stepper_x'] %}
    {% set _stepper_y = _settings['stepper_y'] %}
    {% set _driver_x = _settings['tmc2209 stepper_x'] %}
    {% set _driver_y = _settings['tmc2209 stepper_y'] %}
    
    # CoreXY needs X and Y run currents balanced; collect the settings from the config
    {% set RUN_CURRENT_X = _driver_x.run_current|float %}
    {% set RUN_CURRENT_Y = _driver_y.run_current|float %}

    # determine move amounts
    {% set homing_speed = -1 %}
    {% if "Y" in AXYS %}
      # if we're carrying a toolhead, don't want to hit the left docked one
      {% if not reset_move %}
        {% set reset_move = "Y60" %}
      {% endif %}
      {% set homing_speed = _stepper_y.homing_speed %}
    {% endif %}
    {% if "X" in AXYS %}
      {% if not reset_move %}
        {% set reset_move = "X" + ((100 - _stepper_x.position_max if _stepper_x.homing_positive_dir else 
                                   0 - _stepper_x.position_endstop) | string) %}
      {% endif %}
      {% set homing_speed = (((homing_speed ** 2) + (_stepper_x.homing_speed ** 2)) ** (1/2)) | round %}
    {% endif %}
    {% set smooth_v = 140 %}

    # lower run current for homing to make it crash more softly
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    { MOVE_HOME }
    G0 F{ smooth_v * 60 }
    { PRE_RESET }
    # small move away from the endstop/stall
    G91
    G1 { reset_move } F{ smooth_v * 60 }

    # Wait for StallGuard registers to clear
    M400
    G90
    # Reset normal current for print or whatever
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
