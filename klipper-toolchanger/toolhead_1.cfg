[mcu head1]
# second extruder, Dragon x Voron SF
canbus_uuid: 8de2883a0f08

#####################################################################
#   Extruder
#####################################################################

[board_pins head1]
mcu: head1
aliases:
  ADXL_CS=PB12, ADXL_SCLK=PB10, ADXL_MISO=PB2, ADXL_MOSI=PB11,
  # TMC2209
  M1_STEP=PD0, M1_DIR=PD1, M1_EN=PD2, M1_UART=PA15,
  H0=PB13,
  MAX31865_CS=PA4, MAX31865_SCLK=PA5, MAX31865_MISO=PA6, MAX31865_MOSI=PA7,
  FAN0=PA0, FAN1=PA1,
  BLT_SENSOR=PB8, BLT_CTL=PB9,
  RGB=PD3,

[extruder1]
step_pin: head1:M1_STEP
dir_pin: !head1:M1_DIR
enable_pin: !head1:M1_EN
full_steps_per_rotation: 200   # 1.8° for BondTech stepper motor
rotation_distance: 22.70                                            # See calibrating rotation_distance on extruders doc
gear_ratio: 40:10                                                   # For Mini Afterburner
microsteps: 32
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: head1:H0
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
sensor_type: MAX31865
sensor_pin: head1:MAX31865_CS
spi_software_sclk_pin: head1:MAX31865_SCLK
spi_software_miso_pin: head1:MAX31865_MISO
spi_software_mosi_pin: head1:MAX31865_MOSI
control: pid
# kp=9.5,ki=0.22,kd=33.5: 20-25s to go 20ºC
# kp=9.5,ki=0.225,kd=32: overshot, 60s to stabilize
# kp=9.5,ki=0.225,kd=33: sloow sloow to reach, 45-60s to do 20º
# 235 -> 255: kp=9.5, ki=0.225, kd=34: >70s (overshoot 3.1º)
#         vs: kp=9, ki=0.222, kd=32.5: 43s? (overshoot 3.3º)
# 235 -> 255: (0) kp=8.5, ki=0.25, kd=15: overshot 7.6ºC
#         vs: (1) kp=9, ki=0.25, kd=33: 
# (8.5, 0.23, 15) vs (8.5, 0.25, 30) -> fight! 103 -> 235: (101s, 91s); 235 -> 255: (45s, 52s) left landed on target, then fell by 2.5º, but overshot on the smaller move
# (19.479, 1.007, 94.232) vs (8.5, 0.21, 20) -> fight! 103 -> 235: (90s, 68s); 235 -> 255: (49s, 1m).  Needs more Kd to avoid overshoot on bump, possibly less Ki
# extruder1 PID_CALIBRATE result: pid_Kp=21.610 pid_Ki=1.231 pid_Kd=94.816
# (8.5, 0.21, 25) vs (21.61, 1.231, 94.816) -> fight! 105 -> 235: (62s, 87s); 235 -> 255: (78s, 47s).  Overshot again, slower to fall

# n.b., PID_BASE is lowered to 100 so these are expressed as percentages, apart
# from Ki which is expressed in basis points (%'s of a %, or 1/10,000's)
# to convert to stock, multiply by 2.55 (0.0255 for Ki)
# PID_CALIBRATE values
pid_kp: 21.6     # % of power per degree of delta to target temperature
pid_ki: 0.615    # basis points of power to add per degree·s of cumulative deltas to target.
pid_kd: 94.8    # % of power to subtract per degree/s of current temp. change.
                 # kd Values above 100/(maximum absolute degree/s change when heating/cooling) may result in erratic behavior.
pwm_adjust_early_min: 0.01  # more nimble power control
pwm_adjust_max_hz: 1   #  more frequent power control

# manually determined values
#pid_kp: 3.33
#pid_ki: 8.24
#pid_kd: 7.84

min_temp: 0
max_temp: 320
min_extrude_temp: 50
#min_extrude_temp: 150
max_extrude_only_distance: 150
max_extrude_cross_section: 1.0   #  ??
pressure_advance: 0.02                                               # See tuning pressure advance doc
pressure_advance_smooth_time: 0.040

[adxl345]
cs_pin: head1:ADXL_CS
spi_software_sclk_pin: head1:ADXL_SCLK
spi_software_mosi_pin: head1:ADXL_MOSI
spi_software_miso_pin: head1:ADXL_MISO

[resonance_tester]
accel_chip: adxl345
probe_points: 60, 58, 20  # an example

[tmc2209 extruder1]
uart_pin: head1:M1_UART
#tx_pin: gpio8
#uart_address: 3
interpolate: False
# BondTech 36H020H-1004A-001 pancake stepper
#run_current: 0.7
run_current: 0.5
## For OMC (StepperOnline) 14HR07-1004VRN 1A 0.9°
#run_current: 0.5 # for OMC 14HR07-1004VRN rated at 1A
## For LDO LDO 36STH17-1004AHG 1A 1.8° 
#run_current: 0.3 # for LDO 36STH17-1004AHG
## For LDO LDO 36STH20-1004AHG 1A 1.8° 
#run_current: 0.6 # for LDO 36STH20-1004AHG
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 0 for spreadcycle, avoid using stealthchop on extruder1

#####################################################################
# Fan Control
#####################################################################

[heater_fan T1_extruder_fan]
pin: head1:FAN0
max_power: 1.0
kick_start_time: 0.5
heater: extruder1
heater_temp: 70.0
#fan_speed: 1.0                                                     # You can't PWM the delta fan unless using blue wire

[multi_fan T1_partfan]
pin: head1:FAN1
max_power: 1.0
kick_start_time: 0.5                                                # Depending on your fan, you may need to increase this value if your fan will not start
off_below: 0.13
cycle_time: 0.010

# embedded temperature sensor
[temperature_sensor mcu_temp_head1]
sensor_type: temperature_mcu
sensor_mcu: head1
min_temp: 0
max_temp: 100

#####################################################################
# TOOLCHANGING AND PROBING
#####################################################################
[gcode_macro T1]
variable_color: ""
gcode:
    # {% set svf = printer.save_variables.variables %}
    # {% set gcode_pos = printer.gcode_move.position %}
    # {% set toolhead_pos = printer.toolhead.position %}
    # # Clear the offsets set by macros
    # # Tool changer code may get a little odd if we don't do this before calling for a change.
    # {% if printer.toolchanger.tool_number|int == 1 %}
       # SET_GCODE_OFFSET X_ADJUST={-svf.t1_offset_x| default(0)} Y_ADJUST={-svf.t1_offset_y| default(0)} Z_ADJUST={-svf.t1_offset_z| default(0)}
    # {% else %}
       # SET_GCODE_OFFSET X_ADJUST={-svf.t0_offset_x| default(0)} Y_ADJUST={-svf.t0_offset_y| default(0)} Z_ADJUST={-svf.t0_offset_z| default(0)}
    # {% endif %}
    # # Preserve any modified z offset across the toolchange
    # {% set modified_z = toolhead_pos[2]|float - gcode_pos[2]|float %}
    # Activate T1
    SELECT_TOOL T=1
    # # Set the gcode offset from our save file data.
    # SET_GCODE_OFFSET X_ADJUST={svf.t1_offset_x| default(0)|float} Y_ADJUST={svf.t1_offset_y| default(0)|float} Z_ADJUST={svf.t1_offset_z| default(0)|float + modified_z} MOVE=0
    # SAVE_VARIABLE VARIABLE=current_tool VALUE=0


[tool T1]
tool_number: 1
extruder: extruder1
fan: multi_fan T1_partfan
gcode_x_offset: 17
gcode_y_offset: 2
# set this to whatever offset is needed to make the nozzles level after T0 -> T1
gcode_z_offset: 4
params_park_x: 149
params_detach_x: 143

[tool_probe T1]
pin: head1:PB8
tool: 1
# if the tool is too close after CALIBRATE_Z_OFFSET and G0Z0, decrease this number (move further below zero)
# if the tool is not touching the bed, increase this number (move further towards zero).  Should never be positive (after subtracting gcode_z_offset)
# note: gcode_z_offset counts towards this inversely
z_offset: -0.15
speed: 1
lift_speed: 2.5
sample_retract_dist: 1.5
samples: 5
samples_result: median
samples_tolerance: 0.01
samples_tolerance_retries: 7
activate_gcode:
    _TAP_PROBE_ACTIVATE HEATER=extruder1


#####################################################################
# LEDS
#####################################################################
[neopixel leds_head1]
pin: head1:RGB
chain_count: 3
color_order: GRBW
initial_RED: 0.5
initial_GREEN: 0.2
initial_BLUE: 0.48
initial_WHITE: 1.0

[gcode_macro _vars_head1]
# User settings for the MadMax status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }

variable_logo_led_name:         "leds_head1" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "leds_head1"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle

variable_thermal_config: {
        'extruder': {
            'cool_temp': 40,
            'leds': 'logo',
        },
        'heater_bed': {
            'cool_temp': 40,
            'leds': 'nozzle',
        },
    }
# temperatures at which cooling will be considered complete

gcode:
    ; Do nothing

[gcode_macro _set_leds_head1]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        RESPOND type=echo msg="set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}"
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_leds_by_name_head1]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _vars_head1"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _vars_head1"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _vars_head1"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_leds_head1 led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds_head1]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _vars_head1"].logo_led_name %}
    {% set idx = printer["gcode_macro _vars_head1"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_leds_head1 led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds_head1]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _vars_head1"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _vars_head1"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_leds_head1 led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off_head1]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds_head1 red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on_head1]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_leds_by_name_head1 leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off_head1]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_leds_by_name_head1 leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off_head1]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="standby" transmit=0
    _set_leds_by_name_head1 leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="busy" transmit=0
    set_nozzle_leds_on_head1

[gcode_macro status_heating_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="heating" transmit=0
    _set_leds_by_name_head1 leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on_head1

[gcode_macro status_homing_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="homing" transmit=0
    set_nozzle_leds_on_head1

[gcode_macro status_cleaning_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on_head1

[gcode_macro status_meshing_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on_head1

[gcode_macro status_calibrating_z_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on_head1

[gcode_macro status_printing_head1]
gcode:
    _set_leds_by_name_head1 leds="logo" color="printing" transmit=0
    set_nozzle_leds_on_head1

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*#
#*# [stepper_z]
