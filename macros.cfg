#####################################################################
# Macros
#####################################################################

[gcode_macro PURGE]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(250)|float %}
    {% set VOLUME = params.VOLUME|default(150)|float %}
    {% set FILAMENT_SIZE = params.FILAMENT_SIZE|default(1.75)|float %}
    {% set FILAMENT_CROSS_SECTION = 3.14159*(FILAMENT_SIZE/2)**2 %}
    {% set WIPE = params.WIPE|default(0)|int %}
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
    _absolutely
    M104 S{EXTRUDER_TEMP}
    # general purge bucket @60mm
    G1 X-8 Y60 F3000
    M83
    M109 S{EXTRUDER_TEMP}
    G1 E{ VOLUME/FILAMENT_CROSS_SECTION } F300

    {% if WIPE %}
    ; Move lower and wipe using edge of plate
    G1 Z0 F1200
    G1 X0 F3000
    G1 Z1 F1200
    G1 Z2 X-3 F1200
    G1 X0 F3000
    G1 Y65 F1200
    G1 X-8 Z1 F1200
    {% endif %}

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
    {% set PURGE_VOLUME = params.PURGE_VOLUME|default(25)|float %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set INITIAL_LAYER_HEIGHT = params.INITIAL_LAYER_HEIGHT|default(NOZZLE_SIZE*0.6)|float %}
    {% set FILAMENT_SIZE = params.FILAMENT_SIZE|default(1.75)|float %}
    {% set FILAMENT_CROSS_SECTION = 3.14159*(FILAMENT_SIZE/2)**2 %}
    {% set FILAMENT_MAX_FLOW_RATE = params.FILAMENT_MAX_FLOW_RATE|default(1.75)|float %}
    {% set INITIAL_LAYER_SPEED = params.INITIAL_LAYER_SPEED|default(75)|float %}
    {% set RETRACT_LENGTH = params.RETRACT_LENGTH|default(0.8)|float %}
    {% set PRIME_LENGTH = params.PRIME_LENGTH|default(60)|float %}
    # 1.25 is useful for textured surfaces where extra material is needed to fill in the gaps
    {% set INITIAL_LAYER_FLOW = params.PRIME_LENGTH|default(1.25)|float %}
    {% set FLOW_RATIO = params.FLOW_RATIO|default(0.95)|float %}

    # _MM is extrusion distance (mm filament per linear mm moved)
    # line width is 100% nozzle
    {% set _E_PER_XY = INITIAL_LAYER_HEIGHT*NOZZLE_SIZE/FILAMENT_CROSS_SECTION * INITIAL_LAYER_FLOW * FLOW_RATIO %}
    # _VOL_FLOW is volumetric feed rate (mm/s max for mm3/s flow)
    {% set _VOL_FEED = 60/(FILAMENT_CROSS_SECTION*_E_PER_XY) %}

    # Start bed & extruder heating
    M140 S{BED_TEMP}
    # keep extruder below target
    M104 S{EXTRUDER_TEMP - 50}

    {% if printer.toolhead.homed_axes != "xyz" %}
    G28                            ; home all axes
    {% endif %}
    _absolutely

    ; move to the middle of the sheet for warmup @ 10mm
    CENTER Z=10

    M117 Waiting for bed to heat to {BED_TEMP}ºC
    M190 S{BED_TEMP}

    {% if PURGE_VOLUME > 0 %}
    M117 Heating extruder to {EXTRUDER_TEMP}ºC and preparing to purge {PURGE_VOLUME}mm³ of filament
    PURGE VOLUME={PURGE_VOLUME} EXTRUDER_TEMP={EXTRUDER_TEMP} FILAMENT_SIZE={FILAMENT_SIZE} WIPE=1
    {% else %}
    M117 Heating extruder to {EXTRUDER_TEMP}ºC
    M109 S{EXTRUDER_TEMP}
    M117 Waiting an additional 3s for temp to stabilize
    G4 S3
    {% endif %}

    M117 Priming nozzle
    ; move to priming start position (chosen randomly)
    G1 X{ NOZZLE_SIZE } Y{ [0,5,10,15,20,25,30,35,40] | random } Z1 F3000

    ; Move lower and un-retract
    G1 Z{ INITIAL_LAYER_HEIGHT } F450 E{ RETRACT_LENGTH }
    G4 S0.25 ; wait 0.25 seconds
    ; moves are now relative
    _relatively

    ; draw 50% of bed length (60mm) at first layer speed
    {% set FEED_RATE = [ INITIAL_LAYER_SPEED * 60, _VOL_FEED * FILAMENT_MAX_FLOW_RATE ] | min %}
    G1 Y{ PRIME_LENGTH } F{ FEED_RATE * 0.5 } E{ PRIME_LENGTH*_E_PER_XY | round(2) }

    ; hump over
    G1 X{ NOZZLE_SIZE*2 } E{ (NOZZLE_SIZE*2)*_E_PER_XY | round(2) }

    ; keep priming, go back the way we came, hopefully get rid of blob
    G1 Y-{ 0.75*PRIME_LENGTH } E{ 0.75*PRIME_LENGTH*_E_PER_XY | round(2) }

    G4 S0.1 ; wait 0.1 seconds

    ; move up and retract
    G1 Z1 E-{RETRACT_LENGTH} F450
    G92 E0 ; Reset Extruder

    ; reset to absolute moving
    _absolutely

    ; hop up to 2mm before initial move to start print
    G1 Z2 E-0.5 F600
    M117 Printing
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    _relatively                    ; relative positioning

    {% set _settings = printer.configfile.settings %}
    {% set _stepper_x = _settings['stepper_x'] %}
    {% set _stepper_y = _settings['stepper_y'] %}
    {% set _stepper_z1 = _settings['stepper_z'] %}
    {% set pos = printer.toolhead.position %}
    #   Get Boundaries
    {% set min_x, max_x = _stepper_x.position_min, _stepper_x.position_max %}
    {% set min_y, max_y = _stepper_y.position_min, _stepper_y.position_max %}
    {% set min_z, max_z = _stepper_z1.position_min, _stepper_z1.position_max %}
    # plan to whip the toolhead away to try to detach any string that has formed;
    # which direction should it be (SCV: why always 45°?)
    {% set x_safe = 20.0 if pos.x < (max_x - 20) else -20 %}
    {% set y_safe = 20.0 if pos.y < (max_y - 20) else -20 %}

    # we can't move Z down at the end of the print, so the logic is different here
    {% set z_safe = 2.0 if pos.z < (max_z - 2) else max_z - pos.z %}

    G0 Z{z_safe} F{ _stepper_z1.homing_speed * 60 }  ; move nozzle up
    G0 X{x_safe} Y{y_safe} F{ 150 * 60 }  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    _absolutely                    ; absolute positioning
    ; park nozzle at rear left - zoom there
    G0 {% if pos.x > 0 %}X0{%endif%} {% if pos.y < 100 %}Y100{% endif %} F12000              
    ; slowly return head to final resting place while bed lowers
    G0 X-9 Y{max_y-2} Z{ (pos.z+22, 75) | max } F{ _stepper_z1.homing_speed * 60 * 2 }
  
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro CENTER]
gcode:
   {% set velocity = printer.toolhead.max_velocity %}
   {% set Z = params.Z|default("10")|float %}
   G90
   G0 X57.5 Y55{% if Z > 0 %}Z{Z}{% endif %} F{ velocity * 60 }

[gcode_macro GAUGE_POINT]
gcode:
   {% set velocity = printer.toolhead.max_velocity * 0.5 %}
   {% set X = params.X|default("5")|float %}
   {% set Y = params.Y|default("6")|float %}
   {% set Z = params.Z|default("10")|float %}
   {% set x_pos = printer.bed_mesh.mesh_min[0] + (printer.bed_mesh.mesh_max[0] - printer.bed_mesh.mesh_min[0]) * X / (printer.bed_mesh.mesh_matrix[0] | length) %}
   {% set y_pos = printer.bed_mesh.mesh_min[1] + (printer.bed_mesh.mesh_max[1] - printer.bed_mesh.mesh_min[1]) * Y / (printer.bed_mesh.mesh_matrix | length) %}
   G90
   G0 X{x_pos} Y{y_pos} Z{Z} F{ velocity * 60 }

[gcode_macro CAL_FRONT]
gcode:
   {% set velocity = printer.toolhead.max_velocity %}
   G90
   G0 X57.5 Y0 F{ velocity * 60 }

[gcode_macro CAL_REAR_LEFT]
gcode:
   {% set velocity = printer.toolhead.max_velocity %}
   G90
   G0 X5 Y98 F{ velocity * 60 }

[gcode_macro CAL_REAR_RIGHT]
gcode:
   {% set velocity = printer.toolhead.max_velocity %}
   G90
   G0 X87 Y78 F{ velocity * 60 }

[gcode_macro CENTER_XY]
gcode:
   CENTER Z=-1

[gcode_macro _HOME_XY]
gcode:
    # who do you want to home today, brain?
    {% set AXYS = params.AXIS|default("YX") %}
    {% set PRE_RESET = params.PRE_RESET|default("") %}
    {% set RESET_MOVE = params.RESET_MOVE|default("") %}
    {% set MOVE_HOME = params.HOME_MOVE|default("G28 " + AXYS) %}
    # how hard?
    {% set HOME_CURRENT_RATIO = params.FORCE|default(0.5 if 'Y' in AXYS else 0.6)|float %}

    # shortcut assignments
    {% set _settings = printer.configfile.settings %}
    {% set _stepper_x = _settings['stepper_x'] %}
    {% set _stepper_y = _settings['stepper_y'] %}
    {% set _driver_x = _settings['tmc2209 stepper_x'] %}
    {% set _driver_y = _settings['tmc2209 stepper_y'] %}
    
    # CoreXY needs X and Y run currents balanced; collect the settings from the config
    {% set RUN_CURRENT_X = _driver_x.run_current|float %}
    {% set RUN_CURRENT_Y = _driver_y.run_current|float %}

    # determine move amounts
    {% set homing_speed = -1 %}
    {% if "Y" in AXYS %}
      # if we're carrying a toolhead, don't want to hit the left docked one
      {% if not reset_move %}
        {% set reset_move = "Y60" %}
      {% endif %}
      {% set homing_speed = _stepper_y.homing_speed %}
    {% endif %}
    {% if "X" in AXYS %}
      {% if not reset_move %}
        {% set reset_move = "X" + ((100 - _stepper_x.position_max if _stepper_x.homing_positive_dir else 
                                   0 - _stepper_x.position_endstop) | string) %}
      {% endif %}
      {% set homing_speed = (((homing_speed ** 2) + (_stepper_x.homing_speed ** 2)) ** (1/2)) | round %}
    {% endif %}
    {% set smooth_v = 140 %}

    # lower run current for homing to make it crash more softly
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    { MOVE_HOME }
    G0 F{ smooth_v * 60 }
    { PRE_RESET }
    # small move away from the endstop/stall
    G91
    G1 { reset_move } F{ smooth_v * 60 }

    # Wait for StallGuard registers to clear
    M400
    G90
    # Reset normal current for print or whatever
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    {% set _stepper_z2 = printer.configfile.settings['stepper_z'] %}
    G28 Z
    ; endstop is always positive for now (no TAP)
    G90
    G1 Z100 F1200

[gcode_macro _absolutely]
gcode:
    G90
    M83

[gcode_macro _relatively]
gcode:
    G91

# _dock_home moves to a reference position close to the specified dock 
[gcode_macro _dock_home]
gcode:
    {% set dock = params.DOCK|default(0)|int %}
    {% set docking = params.DOCKING|default(1)|int %}
    {% set shimmy = params.SHIMMY|default(5)|float %}
    {% set _settings = printer.configfile.settings %}
    {% set _stepper_x = _settings['stepper_x'] %}
    {% set min_x, max_x = _stepper_x.position_min, _stepper_x.position_max %}
    {% set pos = printer.toolhead.position %}
    {% set max_v = printer.toolhead.max_velocity %}
    {% set min_v = _stepper_x.homing_speed %}
    {% set smooth_v = 155 %}
    {% set side_sign = 1 if dock == 0 else -1 %}

    # the -1 here is because the right hand side can travel a little further than the ideal docking position
    {% set dock_x_pos = (min_x if dock == 0 else max_x) + (side_sign * shimmy if docking else 0) %}
    {% set dock_y_pos = 17.5 %}

    G90
    # move back if we happen to be very far forward already
    {% if pos.y < dock_y_pos %}
        G0 Y{dock_y_pos} F{ smooth_v * 60 }
    {% endif %}

    # move to the pre-docking location
    G0 X{dock_x_pos} Y{dock_y_pos} F{ smooth_v * 60 }

[gcode_macro test_travel_pitch]
gcode:
    {% set points = params.POINTS | default("X5Y10,X57.5Y60,X121.25Y10,X117Y99,X57.5Y60,X3Y99,X0Y0,X117Y0,X57.5Y60") %}
    {% set start = params.START | default(75) | float %}
    {% set pitches = params.PITCHES | default(48) | int  %}
    {% set end = params.END | default(150) | float  %}
    {% set range_fac = end / start %}

    _absolutely

    {% for pitch in range(pitches+1) %}
       {% set pitch_speed = start * range_fac ** (pitch / pitches) %}
       {% for point in points.split(",") %}
           G0 { point } F{ pitch_speed * 60 | round }
       {% endfor %}
    {% endfor %}

# dock drops the toolhead at the specified dock.
[gcode_macro dock]
gcode:
    {% set dock = params.DOCK|default(0)|int %}
    {% set shimmy = params.SHIMMY|default(5)|float %}
    {% set v = params.V|default(30)|float %}
    {% set side_sign = -1 if dock == 0 else 1 %}

    _dock_home docking=1 dock={dock} shimmy={shimmy}

    # move to 0 pos (speed will be at 'smooth_v' from _dock_home)
    G0 Y0 F{v*60|int}

    # dock: move sideways by 'shimmy', wait 0.2s for magnetic dock to happen
    G91
    G0 X{side_sign * shimmy}
    G4 P200

    # now move the carriage away from the docked toolhead
    G0 Y17.5

    G90
    M83


# undock collects a toolhead from the specified dock.
[gcode_macro undock]
gcode:
    {% set dock = params.DOCK|default(0)|int %}
    {% set shimmy = params.SHIMMY|default(5)|float %}
    {% set v = params.V|default(30)|float %}
    {% set side_sign = 1 if dock == 0 else -1 %}

    _dock_home docking=0 dock={dock}

    # move to 0 pos to grab tool
    G0 Y0 F{v*60|int}
    # wait 0.2s for the tool to attach
    G4 P200

    _relatively
    # shimmy sideways
    G0 X{side_sign * shimmy}
    G0 Y17.5
    _absolutely

[gcode_macro _WAIT_FOR_TEMP_WITHIN_TOLERANCE]
description: Wait for temp to get within tolerance
gcode:
    {% set tolerance = params.TOLERANCE | float  %}
    {% set actual = printer[params.HEATER].temperature | float %}
    {% set target = printer[params.HEATER].target | float %}
    {% if target != 0 and ((actual < (target - tolerance)) or (actual > (target + tolerance))) %}
        { action_respond_info('Extruder temperature %.1fC is not within %.1fC of %.1fC target; waiting...' % (actual, tolerance, target)) }
        RESPOND TYPE=echo MSG='TEMPERATURE_WAIT SENSOR={params.HEATER} MININUM={target - tolerance} MAXIMUM={target + tolerance}'
        TEMPERATURE_WAIT SENSOR={params.HEATER} MININUM={target - tolerance} MAXIMUM={target + tolerance}
        #RESPOND TYPE=echo MSG='DONE WAITING'
    {% endif %}

[gcode_macro TOOLCHANGE_DEMO]
description: do a couple of toolchanges for fun
gcode:
    {% set cycles = params.CYCLES | default(2) | int %}
    {% set delay = params.SLEEP | default(1) | float %}

    CENTER_XY
    G4 P{delay * 1000}
    {% for i in range(cycles) %}
        T0
        CENTER_XY
        G4 P{delay * 1000}
        T1
        CENTER_XY
        G4 P{delay * 1000}
    {% endfor %}
    G4 P{delay * 1000}
    UNSELECT_TOOL
    CENTER_XY
    

[include calibrate_offsets.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*#
#*# [stepper_z]
